/**
 * @package MediaViewer
 * @version 1.2.0
 * @description A javascript library to create a media viewing experience
 * @license MIT
 * @author XHiddenProjects
 * @repository [XHiddenProjects/MediaViewer](https://github.com/XHiddenProjects/MediaViewer)
 */
export class Config{constructor(){this.config={}}getInstance(){return this}set(t,s){return this.config[t]=s,this}add(t,s){return Array.isArray(this.config[t])?this.config[t].push(s):this.config[t]=[s],this}remove(t){return delete this.config[t],this}parse(t){return Array.isArray(t)?t.forEach((t=>{"object"==typeof t&&null!==t&&Object.keys(t).forEach((s=>{this.config[s]||(this.config[s]={}),Object.assign(this.config[s],t[s])}))})):"object"==typeof t&&null!==t&&Object.keys(t).forEach((s=>{"object"==typeof t[s]&&null!==t[s]?(this.config[s]||(this.config[s]={}),Object.assign(this.config[s],t[s])):this.config[s]=t[s]})),this}}export class Styles{constructor(){this.styles={}}getInstance(){return this}addStyle(t,s){return this.styles[`--${t}`]=s,this}removeStyle(t){return delete this.styles[t],this}parse(t){const s=t=>{Object.keys(t).forEach((s=>{const e=t[s];this.styles[s]="object"==typeof e&&null!==e?{...this.styles[s],...e}:e}))};return Array.isArray(t)?t.forEach((t=>{"object"==typeof t&&null!==t&&s(t)})):"object"==typeof t&&null!==t&&s(t),this}}export class Extension{#t;#s;constructor(t,s,e){this.#t=0,this.#s=0,"string"==typeof t?document.querySelector(t)&&(this.container=t):Array.isArray(t)?this.container=t.map(((t,s)=>t)).filter(Boolean):"object"==typeof t&&null!==t&&(this.container={},Object.keys(t).forEach((s=>{const e=t[s];e&&(this.container[s]=e)}))),this.isInstanceof(this.getInstance(s),Config)&&(this.config=s),this.isInstanceof(this.getInstance(e),Styles)&&(this.styles=e)}isInstanceof(t,s){return 1==arguments.length?this instanceof t:t instanceof s}getInstance(t){return t?t.getInstance():this}include(...t){this.medias=[];const s=t=>"function"==typeof t?this.getInstance(new t(!1)):"object"==typeof t&&null!==t?this.getInstance(t):null;if(Array.isArray(t))this.medias=t.map(s).filter((t=>null!==t));else{const e=s(t);e&&this.medias.push(e)}}use(t){return{apply:()=>{const s=this.medias.find((s=>this.isInstanceof(this.getInstance(s),t))).constructor,e=s.name;let n;return n=Array.isArray(this.container)?this.container[this.#s++]:"object"==typeof this.container?this.container[e]:this.container,n?new s(n,this.config.config[e]??{},this.styles.styles[e]??{},!0):null},attach:()=>{const s=this.medias.find((s=>s.constructor===t||this.isInstanceof(this.getInstance(s),t)));if(s){const t=s.constructor.name;let e;e=Array.isArray(this.container)?this.container[this.#s++]:"object"==typeof this.container?this.container[t]:this.container;const n=new s.constructor(e,this.config.config[t]??{},this.styles.styles[t]??{},!1);return this[t]=this[t]||{},Object.getOwnPropertyNames(s.constructor.prototype).forEach((e=>{"constructor"===e&&"function"==typeof s.constructor.prototype[e]&&(this[t][e]=s.constructor.prototype[e].bind(n))})),n.constructor}return null}}}set(t){let s;return s=Array.isArray(this.container)?this.container[this.#t++]:"object"==typeof this.container?this.container[t.name]:this.container,[s,this.config.config[t.name]??{},this.styles.styles[t.name]??{},!0]}getConfig(){return this.config.config}getStyles(){return this.styles.styles}}